# This config uses the `.circleci/extended/orb-test.yml` as its base, and then publishes the app to S3.
# The workflow contained here demonstrates a practical application of `post-steps`
# and using workspace persistence
version: 2.1

# Orbs are reusable packages of CircleCI configuration that you may share across projects, enabling you to create encapsulated, parameterized commands, jobs, and executors that can be used across multiple projects.
# See: https://circleci.com/docs/2.0/orb-intro/
orbs:
  node: circleci/node@5.0.2
  # The S3 orb will setup the aws-cli and quickly copy or sync anything to s3.
  # Orbs reduce the amount of configuration required for common tasks.
  # See the orb documentation here: https://circleci.com/developer/orbs/orb/circleci/aws-s3
  # NOTE: Environment variables containing the necessary secrets can be setup in the CircleCI UI
  # See here https://circleci.com/docs/2.0/env-vars/#setting-an-environment-variable-in-a-project

jobs:
  build:
    working_directory: ~/repo
    docker:
      - image: circleci/node:16.14.2-browsers
        auth:
          username: mydockerhub-user  # can specify string literal values
          password: DOCKERHUB_PASSWORD  # or project environment 
    steps:
      - checkout
      - run:
          name: update-npm
          command: "sudo npm install -g npm@8.5.0"
      - restore_cache:
          key: dependency-cache-{{ checksum "package-lock.json" }}
      - run:
          name: install-packages
          command: npm install
      - save_cache:
          key: dependency-cache-{{ checksum "package-lock.json" }}
          paths:
            - ./node_modules
      - run:
          name: build-project
          command: npm run build
      - persist_to_workspace:
          root: .
          paths:
            - .
  deploy:
    working_directory: ~/repo
    docker:
      - image: amazon/aws-cli:2.7.5
        auth:
          username: mydockerhub-user  # can specify string literal values
          password: DOCKERHUB_PASSWORD  # or project environment 
    steps:
      - attach_workspace:
          at: .
      - run:
          name: deploy
          command: aws s3 sync ./.output/ s3://test-nuxt-with-circle-ci
    

# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  build-deploy: # Make a workflow to build and deploy your project
     jobs:
       - build
       - deploy:
           requires:
             - build # Only run deploy job once the build job has completed
           filters:
             branches:
               only: circleci-project-setup # Only deploy when the commit is on the Main branch

